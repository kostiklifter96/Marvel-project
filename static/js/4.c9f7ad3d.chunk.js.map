{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.jsx","components/charListItem/CharListItem.jsx","components/charList/CharList.jsx","components/charInfo/CharInfo.jsx","resources/img/vision.png","components/errorBoundary/ErrorBoundary.jsx","components/charSearchForm/СharSearchForm.jsx","components/pages/MainPage.jsx"],"names":["View","data","name","description","thumbnail","homepage","wiki","className","src","alt","style","objectFit","href","RandomChar","useState","char","setChar","useMarvelService","getCharacters","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharListItem","i","imgStyle","onCharSelected","focusOnItem","tabIndex","onFocus","CharList","props","charList","setCharlist","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","charItem","map","el","element","useMemo","Component","Spinner","ErrorMessage","Error","disabled","display","comics","statusIn","setStatusIn","CSSTransition","timeout","in","classNames","unmountOnExit","length","item","to","resourceURI","substring","CharInfo","charId","ErrorBoundary","state","error","err","info","this","setState","children","CharSearchForm","getCharacterByName","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","MainPage","selectedChar","setSelectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/4.c9f7ad3d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import './randomChar.scss'\nimport mjolnir from '../../resources/img/mjolnir.png'\nimport { useState, useEffect } from 'react'\nimport useMarvelService from './../../services/MarvelService'\nimport setContent from '../../utils/setContent'\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({})\n  const { getCharacters, clearError, process, setProcess } =\n    useMarvelService()\n\n  useEffect(() => {\n    updateChar()\n  }, [])\n\n  useEffect(() => {\n    const timerId = setInterval(updateChar, 150000)\n\n    return () => {\n      clearInterval(timerId)\n    }\n  })\n\n  //* загрузка в стэйт данных о полученном персонаже\n  const onCharLoaded = (char) => {\n    setChar(char)\n  }\n\n  const updateChar = () => {\n    clearError()\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n    getCharacters(id)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'))\n  }\n\n  return (\n    <div className='randomchar'>\n      {setContent(process, View, char)}\n      <div className='randomchar__static'>\n        <p className='randomchar__title'>\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className='randomchar__title'>Or choose another one</p>\n        <button className='button button__main' onClick={updateChar}>\n          <div className='inner'>try it</div>\n        </button>\n        <img\n          src={mjolnir}\n          alt='mjolnir'\n          className='randomchar__decoration'\n        />\n      </div>\n    </div>\n  )\n}\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data\n\n  return (\n    <div className='randomchar__block'>\n      {thumbnail ===\n      'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? (\n        <img\n          src={thumbnail}\n          alt='Random character'\n          className='randomchar__img'\n          style={{ objectFit: 'contain' }}\n        />\n      ) : (\n        <img\n          src={thumbnail}\n          alt='Random character'\n          className='randomchar__img'\n        />\n      )}\n\n      {/* <img\n            src={thumbnail}\n            alt=\"Random character\"\n            className=\"randomchar__img\"\n         /> */}\n      <div className='randomchar__info'>\n        <p className='randomchar__name'>{name}</p>\n        <p className='randomchar__descr'>{description}</p>\n        <div className='randomchar__btns'>\n          <a href={homepage} className='button button__main'>\n            <div className='inner'>homepage</div>\n          </a>\n          <a href={wiki} className='button button__secondary'>\n            <div className='inner'>Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RandomChar\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './charListItem.scss'\r\n\r\nexport default function CharListItem({\r\n  i,\r\n  id,\r\n  name,\r\n  thumbnail,\r\n  imgStyle,\r\n  onCharSelected,\r\n  focusOnItem,\r\n}) {\r\n  return (\r\n    <li\r\n      className='char__item'\r\n      tabIndex={0}\r\n      onClick={() => onCharSelected(id)}\r\n      onFocus={() => onCharSelected(id)}\r\n    >\r\n      <img src={thumbnail} alt={thumbnail} style={imgStyle} />\r\n      <div className='char__name'>{name}</div>\r\n    </li>\r\n  )\r\n}\r\nCharListItem.propTypes = {\r\n  onCharSelected: PropTypes.func,\r\n}\r\n","import { useEffect, useMemo, useState } from 'react'\nimport './charList.scss'\nimport CharListItem from '../charListItem/CharListItem'\nimport useMarvelService from './../../services/MarvelService'\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from '../errorMessage/ErrorMessage'\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case 'waiting':\n      return <Spinner />\n    case 'loading':\n      return newItemLoading ? <Component /> : <Spinner />\n    case 'confirmed':\n      return <Component />\n    case 'error':\n      return <ErrorMessage />\n    default:\n      throw new Error('Unexrected process state')\n  }\n}\n\nconst CharList = (props) => {\n  const [charList, setCharlist] = useState([])\n  const [newItemLoading, setNewItemLoading] = useState(false)\n  const [offset, setOffset] = useState(250)\n  const [charEnded, setCharEnded] = useState(false)\n\n  const { getAllCharacters, process, setProcess } = useMarvelService()\n\n  useEffect(() => {\n    onRequest(offset, true)\n    // eslint-disable-next-line\n  }, [])\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true)\n\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess('confirmed'))\n  }\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false\n    if (newCharList < 9) {\n      ended = true\n    }\n\n    setCharlist([...charList, ...newCharList])\n    setNewItemLoading(false)\n    setOffset(offset + 9)\n    setCharEnded(ended)\n  }\n\n  const charItem = (\n    <ul className='char__grid'>\n      {charList.map((el, i) => {\n        let imgStyle = { objectFit: 'cover' }\n\n        if (\n          el.thumbnail ===\n          'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n        ) {\n          imgStyle = { objectFit: 'unset' }\n        }\n\n        return (\n          <CharListItem\n            key={el.id}\n            {...el}\n            imgStyle={imgStyle}\n            onCharSelected={() => props.onCharSelected(el.id)}\n          />\n        )\n      })}\n    </ul>\n  )\n\n  const element = useMemo(() => {\n    return setContent(process, () => charItem, newItemLoading)\n    // eslint-disable-next-line\n  }, [charList])\n\n  return (\n    <div className='char__list'>\n      {element}\n      <button\n        className='button button__main button__long'\n        disabled={newItemLoading}\n        style={{\n          display: charEnded ? 'none' : 'block',\n        }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className='inner'>load more</div>\n      </button>\n    </div>\n  )\n}\n\nexport default CharList\n","import './charInfo.scss'\nimport React from 'react'\nimport { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport useMarvelService from './../../services/MarvelService'\nimport { Link } from 'react-router-dom'\nimport { CSSTransition } from 'react-transition-group'\nimport setContent from './../../utils/setContent'\n\nconst CharInfo = ({ charId }) => {\n  const [char, setChar] = useState(null)\n  const { process, setProcess, getCharacters, clearError } =\n    useMarvelService()\n\n  useEffect(() => {\n    updateChar()\n  }, [charId])\n\n  const updateChar = () => {\n    if (!charId) {\n      return\n    }\n\n    clearError()\n    getCharacters(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'))\n  }\n\n  const onCharLoaded = (char) => {\n    setChar(char)\n  }\n\n  return (\n    <div className='char__info'>{setContent(process, View, char)}</div>\n  )\n}\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data\n  const [statusIn, setStatusIn] = useState(false)\n\n  useEffect(() => {\n    setStatusIn(true)\n  }, [])\n\n  let imgStyle = { objectFit: 'cover' }\n  if (\n    thumbnail ===\n    'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n  ) {\n    imgStyle = { objectFit: 'unset' }\n  }\n\n  return (\n    <CSSTransition\n      timeout={1000}\n      in={statusIn}\n      classNames='char'\n      unmountOnExit\n    >\n      <>\n        <div className='char__basics'>\n          <img src={thumbnail} alt={name} style={imgStyle} />\n          <div>\n            <div className='char__info-name'>{name}</div>\n            <div className='char__btns'>\n              <a href={homepage} className='button button__main'>\n                <div className='inner'>homepage</div>\n              </a>\n              <a href={wiki} className='button button__secondary'>\n                <div className='inner'>Wiki</div>\n              </a>\n            </div>\n          </div>\n        </div>\n        <div className='char__descr'>{description}</div>\n        <div className='char__comics'>Comics: </div>\n        <ul className='char__comics-list'>\n          {!comics.length\n            ? 'There is no comics with this character'\n            : null}\n\n          {comics.map((item, i) => {\n            if (i > 9) {\n              // eslint-disable-next-line\n              return\n            }\n\n            return (\n              <li className='char__comics-item' key={i}>\n                <Link to={`/comics/${item.resourceURI.substring(43)}`}>\n                  {item.name}\n                </Link>\n              </li>\n            )\n          })}\n        </ul>\n      </>\n    </CSSTransition>\n  )\n}\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n}\n\nexport default CharInfo\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import React, { Component } from 'react'\r\nimport ErrorMessage from '../errorMessage/ErrorMessage'\r\n\r\nclass ErrorBoundary extends Component {\r\n   state = { error: false }\r\n\r\n   componentDidCatch(err, info) {\r\n      this.setState({ error: true })\r\n   }\r\n\r\n   render() {\r\n      if (this.state.error) {\r\n         return <ErrorMessage />\r\n      }\r\n\r\n      return this.props.children\r\n   }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import { useState } from 'react'\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { Link } from 'react-router-dom'\r\nimport useMarvelService from '../../services/MarvelService'\r\nimport ErrorMessage from '../errorMessage/ErrorMessage'\r\nimport './CharSearchForm.scss'\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return null\r\n    case 'loading':\r\n      return newItemLoading ? <Component /> : null\r\n    case 'confirmed':\r\n      return <Component />\r\n    case 'error':\r\n      return <ErrorMessage />\r\n    default:\r\n      throw new Error('Unexrected process state')\r\n  }\r\n}\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null)\r\n  const [newItemLoading, setNewItemLoading] = useState(false)\r\n\r\n  const { getCharacterByName, clearError, process, setProcess } =\r\n    useMarvelService()\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char)\r\n    setNewItemLoading(false)\r\n  }\r\n\r\n  const updateChar = (name) => {\r\n    clearError()\r\n    setNewItemLoading(true)\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess('confirmed'))\r\n  }\r\n\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className='char__search-wrapper'>\r\n      <div className='char__search-success'>\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className='button button__secondary'\r\n      >\r\n        <div className='inner'>To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className='char__search-error'>\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <div className='char__search-form'>\r\n      <Formik\r\n        initialValues={{\r\n          charName: '',\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required('This field is required'),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName)\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className='char__search-label' htmlFor='charName'>\r\n            Or find a character by name:\r\n          </label>\r\n          <div className='char__search-wrapper'>\r\n            <Field\r\n              id='charName'\r\n              name='charName'\r\n              type='text'\r\n              placeholder='Enter name'\r\n            />\r\n            <button\r\n              type='submit'\r\n              className='button button__main'\r\n              disabled={newItemLoading}\r\n            >\r\n              <div className='inner'>find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component='div'\r\n            className='char__search-error'\r\n            name='charName'\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {setContent(process, () => results, newItemLoading)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharSearchForm\r\n","import RandomChar from '../randomChar/RandomChar'\r\nimport CharList from '../charList/CharList'\r\nimport CharInfo from '../charInfo/CharInfo'\r\nimport decoration from '../../resources/img/vision.png'\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary'\r\n\r\nimport React, { useState } from 'react'\r\nimport CharSearchForm from '../charSearchForm/СharSearchForm'\r\nimport { Helmet } from 'react-helmet'\r\n\r\nexport default function MainPage() {\r\n  const [selectedChar, setSelectedChar] = useState(null)\r\n\r\n  const onCharSelected = (id) => {\r\n    setSelectedChar(id)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name='description' content='Marvel information portal' />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n\r\n      <div className='char__content'>\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n\r\n      <img className='bg-decoration' src={decoration} alt='vision' />\r\n    </>\r\n  )\r\n}\r\n"],"sourceRoot":""}